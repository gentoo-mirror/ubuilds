From cd7ce9000efe253433a9f2dd412363b94c0d1752 Mon Sep 17 00:00:00 2001
From: Matt Linscott <matt@classifiedads.com>
Date: Tue, 17 May 2016 21:08:41 -0700
Subject: [PATCH] Clean up TSRMLS* and warnings. Try to get session/apcu
 working.

---
 apc_serializer.h |  37 ++--
 igbinary.c       | 628 ++++++++++++++++++++++++++-----------------------------
 igbinary.h       |   6 +-
 3 files changed, 319 insertions(+), 352 deletions(-)

diff --git a/apc_serializer.h b/apc_serializer.h
index bc29ca1..e7db587 100644
--- a/apc_serializer.h
+++ b/apc_serializer.h
@@ -26,8 +26,8 @@
 #define APC_SERIALIZER_NAME(module) module##_apc_serializer
 #define APC_UNSERIALIZER_NAME(module) module##_apc_unserializer
 
-#define APC_SERIALIZER_ARGS unsigned char **buf, size_t *buf_len, const zval *value, void *config TSRMLS_DC
-#define APC_UNSERIALIZER_ARGS zval **value, unsigned char *buf, size_t buf_len, void *config TSRMLS_DC
+#define APC_SERIALIZER_ARGS unsigned char **buf, size_t *buf_len, const zval *value, void *config
+#define APC_UNSERIALIZER_ARGS zval *value, unsigned char *buf, size_t buf_len, void *config
 
 typedef int (*apc_serialize_t)(APC_SERIALIZER_ARGS);
 typedef int (*apc_unserialize_t)(APC_UNSERIALIZER_ARGS);
@@ -35,7 +35,7 @@ typedef int (*apc_unserialize_t)(APC_UNSERIALIZER_ARGS);
 typedef int (*apc_register_serializer_t)(const char* name,
                                         apc_serialize_t serialize,
                                         apc_unserialize_t unserialize,
-                                        void *config TSRMLS_DC);
+                                        void *config);
 
 /*
  * ABI version for constant hooks. Increment this any time you make any changes
@@ -55,26 +55,25 @@ typedef int (*apc_register_serializer_t)(const char* name,
 static APC_UNUSED int apc_register_serializer(const char* name,
                                     apc_serialize_t serialize,
                                     apc_unserialize_t unserialize,
-                                    void *config TSRMLS_DC)
+                                    void *config)
 {
-    zval *apc_magic_constant = NULL;
-    (void)config;
-
-    ALLOC_INIT_ZVAL(apc_magic_constant);
-
-    if (zend_get_constant(APC_SERIALIZER_CONSTANT, sizeof(APC_SERIALIZER_CONSTANT)-1, apc_magic_constant TSRMLS_CC)) {
-        if(apc_magic_constant) {
-            apc_register_serializer_t register_func = (apc_register_serializer_t)(Z_LVAL_P(apc_magic_constant));
-            if(register_func) {
-                zval_dtor(apc_magic_constant);
-                return register_func(name, serialize, unserialize, NULL TSRMLS_CC);
-           }
-       }
+    int retval = 0;
+
+	zend_string *lookup = zend_string_init(
+		APC_SERIALIZER_CONSTANT, sizeof(APC_SERIALIZER_CONSTANT)-1, 0);
+	zval *magic = zend_get_constant(lookup);
+
+    /* zend_get_constant will return 1 on success, otherwise apc_magic_constant wouldn't be touched at all */
+    if (magic) {
+        apc_register_serializer_t register_func = (apc_register_serializer_t)(Z_LVAL_P(magic));
+        if(register_func) {
+            retval = register_func(name, serialize, unserialize, NULL);
+        }
     }
 
-    zval_dtor(apc_magic_constant);
+	zend_string_release(lookup);
 
-    return 0;
+    return retval;
 }
 
 #endif
diff --git a/igbinary.c b/igbinary.c
index 7218394..c99eb7c 100644
--- a/igbinary.c
+++ b/igbinary.c
@@ -21,13 +21,6 @@
 #include "ext/standard/info.h"
 #include "ext/standard/php_var.h"
 
-#if PHP_MAJOR_VERSION >= 7
-/* FIXME: still fix sessions and the APC-thingy */
-# undef HAVE_PHP_SESSION
-# undef HAVE_APC_SUPPORT
-# undef HAVE_APCU_SUPPORT
-#endif
-
 #if HAVE_PHP_SESSION
 # include "ext/session/php_session.h"
 #endif /* HAVE_PHP_SESSION */
@@ -186,53 +179,53 @@ static inline void *igbinary_mm_wrapper_realloc(void *ptr, size_t size, void *co
 static inline void igbinary_mm_wrapper_free(void *ptr, void *context);
 /* }}} */
 /* {{{ Serializing functions prototypes */
-inline static int igbinary_serialize_data_init(struct igbinary_serialize_data *igsd, bool scalar, struct igbinary_memory_manager *memory_manager TSRMLS_DC);
-inline static void igbinary_serialize_data_deinit(struct igbinary_serialize_data *igsd, int free_buffer TSRMLS_DC);
-
-inline static int igbinary_serialize_header(struct igbinary_serialize_data *igsd TSRMLS_DC);
-
-inline static int igbinary_serialize8(struct igbinary_serialize_data *igsd, uint8_t i TSRMLS_DC);
-inline static int igbinary_serialize16(struct igbinary_serialize_data *igsd, uint16_t i TSRMLS_DC);
-inline static int igbinary_serialize32(struct igbinary_serialize_data *igsd, uint32_t i TSRMLS_DC);
-inline static int igbinary_serialize64(struct igbinary_serialize_data *igsd, uint64_t i TSRMLS_DC);
-
-inline static int igbinary_serialize_null(struct igbinary_serialize_data *igsd TSRMLS_DC);
-inline static int igbinary_serialize_bool(struct igbinary_serialize_data *igsd, int b TSRMLS_DC);
-inline static int igbinary_serialize_long(struct igbinary_serialize_data *igsd, long l TSRMLS_DC);
-inline static int igbinary_serialize_double(struct igbinary_serialize_data *igsd, double d TSRMLS_DC);
-inline static int igbinary_serialize_string(struct igbinary_serialize_data *igsd, char *s, size_t len TSRMLS_DC);
-inline static int igbinary_serialize_chararray(struct igbinary_serialize_data *igsd, const char *s, size_t len TSRMLS_DC);
-
-inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd, zval *z, bool object, bool incomplete_class TSRMLS_DC);
-inline static int igbinary_serialize_array_ref(struct igbinary_serialize_data *igsd, zval *z, bool object TSRMLS_DC);
-inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data *igsd, zval *z, HashTable *ht, zend_class_entry *ce, bool incomplete_class TSRMLS_DC);
-inline static int igbinary_serialize_object_name(struct igbinary_serialize_data *igsd, const char *name, size_t name_len TSRMLS_DC);
-inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd, zval *z TSRMLS_DC);
-
-static int igbinary_serialize_zval(struct igbinary_serialize_data *igsd, zval *z TSRMLS_DC);
+inline static int igbinary_serialize_data_init(struct igbinary_serialize_data *igsd, bool scalar, struct igbinary_memory_manager *memory_manager);
+inline static void igbinary_serialize_data_deinit(struct igbinary_serialize_data *igsd, int free_buffer);
+
+inline static int igbinary_serialize_header(struct igbinary_serialize_data *igsd);
+
+inline static int igbinary_serialize8(struct igbinary_serialize_data *igsd, uint8_t i);
+inline static int igbinary_serialize16(struct igbinary_serialize_data *igsd, uint16_t i);
+inline static int igbinary_serialize32(struct igbinary_serialize_data *igsd, uint32_t i);
+inline static int igbinary_serialize64(struct igbinary_serialize_data *igsd, uint64_t i);
+
+inline static int igbinary_serialize_null(struct igbinary_serialize_data *igsd);
+inline static int igbinary_serialize_bool(struct igbinary_serialize_data *igsd, int b);
+inline static int igbinary_serialize_long(struct igbinary_serialize_data *igsd, long l);
+inline static int igbinary_serialize_double(struct igbinary_serialize_data *igsd, double d);
+inline static int igbinary_serialize_string(struct igbinary_serialize_data *igsd, char *s, size_t len);
+inline static int igbinary_serialize_chararray(struct igbinary_serialize_data *igsd, const char *s, size_t len);
+
+inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd, zval *z, bool object, bool incomplete_class);
+inline static int igbinary_serialize_array_ref(struct igbinary_serialize_data *igsd, zval *z, bool object);
+inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data *igsd, zval *z, HashTable *ht, zend_class_entry *ce, bool incomplete_class);
+inline static int igbinary_serialize_object_name(struct igbinary_serialize_data *igsd, const char *name, size_t name_len);
+inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd, zval *z);
+
+static int igbinary_serialize_zval(struct igbinary_serialize_data *igsd, zval *z);
 /* }}} */
 /* {{{ Unserializing functions prototypes */
-inline static int igbinary_unserialize_data_init(struct igbinary_unserialize_data *igsd TSRMLS_DC);
-inline static void igbinary_unserialize_data_deinit(struct igbinary_unserialize_data *igsd TSRMLS_DC);
+inline static int igbinary_unserialize_data_init(struct igbinary_unserialize_data *igsd);
+inline static void igbinary_unserialize_data_deinit(struct igbinary_unserialize_data *igsd);
 
-inline static int igbinary_unserialize_header(struct igbinary_unserialize_data *igsd TSRMLS_DC);
+inline static int igbinary_unserialize_header(struct igbinary_unserialize_data *igsd);
 
-inline static uint8_t igbinary_unserialize8(struct igbinary_unserialize_data *igsd TSRMLS_DC);
-inline static uint16_t igbinary_unserialize16(struct igbinary_unserialize_data *igsd TSRMLS_DC);
-inline static uint32_t igbinary_unserialize32(struct igbinary_unserialize_data *igsd TSRMLS_DC);
-inline static uint64_t igbinary_unserialize64(struct igbinary_unserialize_data *igsd TSRMLS_DC);
+inline static uint8_t igbinary_unserialize8(struct igbinary_unserialize_data *igsd);
+inline static uint16_t igbinary_unserialize16(struct igbinary_unserialize_data *igsd);
+inline static uint32_t igbinary_unserialize32(struct igbinary_unserialize_data *igsd);
+inline static uint64_t igbinary_unserialize64(struct igbinary_unserialize_data *igsd);
 
-inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *igsd, enum igbinary_type t, long *ret TSRMLS_DC);
-inline static int igbinary_unserialize_double(struct igbinary_unserialize_data *igsd, enum igbinary_type t, double *ret TSRMLS_DC);
-inline static int igbinary_unserialize_string(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len TSRMLS_DC);
-inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len TSRMLS_DC);
+inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *igsd, enum igbinary_type t, long *ret);
+inline static int igbinary_unserialize_double(struct igbinary_unserialize_data *igsd, enum igbinary_type t, double *ret);
+inline static int igbinary_unserialize_string(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len);
+inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len);
 
-inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags TSRMLS_DC);
-inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags TSRMLS_DC);
-inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, zend_class_entry *ce TSRMLS_DC);
-inline static int igbinary_unserialize_ref(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z TSRMLS_DC);
+inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags);
+inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags);
+inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, zend_class_entry *ce);
+inline static int igbinary_unserialize_ref(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z);
 
-static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zval *z, int flags TSRMLS_DC);
+static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zval *z, int flags);
 /* }}} */
 /* {{{ arginfo */
 ZEND_BEGIN_ARG_INFO_EX(arginfo_igbinary_serialize, 0, 0, 1)
@@ -327,7 +320,7 @@ PHP_MINIT_FUNCTION(igbinary) {
 	apc_register_serializer("igbinary",
 		APC_SERIALIZER_NAME(igbinary),
 		APC_UNSERIALIZER_NAME(igbinary),
-		NULL TSRMLS_CC);
+		NULL);
 #endif
 
 	REGISTER_INI_ENTRIES();
@@ -392,34 +385,34 @@ static inline void igbinary_mm_wrapper_free(void *ptr, void *context)
 }
 /* }}} */
 /* {{{ int igbinary_serialize(uint8_t**, size_t*, zval*) */
-IGBINARY_API int igbinary_serialize(uint8_t **ret, size_t *ret_len, zval *z TSRMLS_DC) {
-	return igbinary_serialize_ex(ret, ret_len, z, NULL TSRMLS_CC);
+IGBINARY_API int igbinary_serialize(uint8_t **ret, size_t *ret_len, zval *z) {
+	return igbinary_serialize_ex(ret, ret_len, z, NULL);
 }
 /* }}} */
 /* {{{ int igbinary_serialize_ex(uint8_t**, size_t*, zval*, igbinary_memory_manager*) */
-IGBINARY_API int igbinary_serialize_ex(uint8_t **ret, size_t *ret_len, zval *z, struct igbinary_memory_manager *memory_manager TSRMLS_DC) {
+IGBINARY_API int igbinary_serialize_ex(uint8_t **ret, size_t *ret_len, zval *z, struct igbinary_memory_manager *memory_manager) {
 	struct igbinary_serialize_data igsd;
 	uint8_t *tmpbuf;
 
-	if (igbinary_serialize_data_init(&igsd, Z_TYPE_P(z) != IS_OBJECT && Z_TYPE_P(z) != IS_ARRAY, memory_manager TSRMLS_CC)) {
+	if (igbinary_serialize_data_init(&igsd, Z_TYPE_P(z) != IS_OBJECT && Z_TYPE_P(z) != IS_ARRAY, memory_manager)) {
 		zend_error(E_WARNING, "igbinary_serialize: cannot init igsd");
 		return 1;
 	}
 
-	if (igbinary_serialize_header(&igsd TSRMLS_CC) != 0) {
+	if (igbinary_serialize_header(&igsd) != 0) {
 		zend_error(E_WARNING, "igbinary_serialize: cannot write header");
-		igbinary_serialize_data_deinit(&igsd, 1 TSRMLS_CC);
+		igbinary_serialize_data_deinit(&igsd, 1);
 		return 1;
 	}
 
-	if (igbinary_serialize_zval(&igsd, z TSRMLS_CC) != 0) {
-		igbinary_serialize_data_deinit(&igsd, 1 TSRMLS_CC);
+	if (igbinary_serialize_zval(&igsd, z) != 0) {
+		igbinary_serialize_data_deinit(&igsd, 1);
 		return 1;
 	}
 
 	/* Explicit nul termination */
-	if (igbinary_serialize8(&igsd, 0 TSRMLS_CC) != 0) {
-		igbinary_serialize_data_deinit(&igsd, 1 TSRMLS_CC);
+	if (igbinary_serialize8(&igsd, 0) != 0) {
+		igbinary_serialize_data_deinit(&igsd, 1);
 		return 1;
 	}
 
@@ -433,31 +426,31 @@ IGBINARY_API int igbinary_serialize_ex(uint8_t **ret, size_t *ret_len, zval *z,
 	*ret_len = igsd.buffer_size - 1;
 	*ret = igsd.buffer;
 
-	igbinary_serialize_data_deinit(&igsd, 0 TSRMLS_CC);
+	igbinary_serialize_data_deinit(&igsd, 0);
 
 	return 0;
 }
 /* }}} */
 /* {{{ int igbinary_unserialize(const uint8_t *, size_t, zval **) */
-IGBINARY_API int igbinary_unserialize(const uint8_t *buf, size_t buf_len, zval *z TSRMLS_DC) {
+IGBINARY_API int igbinary_unserialize(const uint8_t *buf, size_t buf_len, zval *z) {
 	struct igbinary_unserialize_data igsd;
 
-	igbinary_unserialize_data_init(&igsd TSRMLS_CC);
+	igbinary_unserialize_data_init(&igsd);
 
 	igsd.buffer = (uint8_t *) buf;
 	igsd.buffer_size = buf_len;
 
-	if (igbinary_unserialize_header(&igsd TSRMLS_CC)) {
-		igbinary_unserialize_data_deinit(&igsd TSRMLS_CC);
+	if (igbinary_unserialize_header(&igsd)) {
+		igbinary_unserialize_data_deinit(&igsd);
 		return 1;
 	}
 
-	if (igbinary_unserialize_zval(&igsd, z, WANT_CLEAR TSRMLS_CC)) {
-		igbinary_unserialize_data_deinit(&igsd TSRMLS_CC);
+	if (igbinary_unserialize_zval(&igsd, z, WANT_CLEAR)) {
+		igbinary_unserialize_data_deinit(&igsd);
 		return 1;
 	}
 
-	igbinary_unserialize_data_deinit(&igsd TSRMLS_CC);
+	igbinary_unserialize_data_deinit(&igsd);
 
 	return 0;
 }
@@ -467,7 +460,7 @@ PHP_FUNCTION(igbinary_unserialize) {
 	char *string = NULL;
 	size_t string_len;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &string, &string_len) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &string, &string_len) == FAILURE) {
 		RETURN_NULL();
 	}
 
@@ -475,7 +468,7 @@ PHP_FUNCTION(igbinary_unserialize) {
 		RETURN_FALSE;
 	}
 
-	if (igbinary_unserialize((uint8_t *) string, string_len, return_value TSRMLS_CC) != 0) {
+	if (igbinary_unserialize((uint8_t *) string, string_len, return_value) != 0) {
 		/* FIXME: is this a good place? a catch all */
 		zval_ptr_dtor(return_value);
 		RETURN_NULL();
@@ -489,11 +482,11 @@ PHP_FUNCTION(igbinary_serialize) {
 	size_t string_len;
 
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "z", &z) == FAILURE) {
 		RETURN_NULL();
 	}
 
-	if (igbinary_serialize(&string, &string_len, z TSRMLS_CC) != 0) {
+	if (igbinary_serialize(&string, &string_len, z) != 0) {
 		RETURN_NULL();
 	}
 
@@ -508,25 +501,25 @@ PS_SERIALIZER_ENCODE_FUNC(igbinary)
 	struct igbinary_serialize_data igsd;
 	uint8_t *tmpbuf;
 
-	if (igbinary_serialize_data_init(&igsd, false, NULL TSRMLS_CC)) {
+	if (igbinary_serialize_data_init(&igsd, false, NULL)) {
 		zend_error(E_WARNING, "igbinary_serialize: cannot init igsd");
-		return FAILURE;
+		return ZSTR_EMPTY_ALLOC();
 	}
 
-	if (igbinary_serialize_header(&igsd TSRMLS_CC) != 0) {
+	if (igbinary_serialize_header(&igsd) != 0) {
 		zend_error(E_WARNING, "igbinary_serialize: cannot write header");
-		igbinary_serialize_data_deinit(&igsd, 1 TSRMLS_CC);
-		return FAILURE;
+		igbinary_serialize_data_deinit(&igsd, 1);
+		return ZSTR_EMPTY_ALLOC();
 	}
 
-	if (igbinary_serialize_array(&igsd, PS(http_session_vars), false, false TSRMLS_CC) != 0) {
-		igbinary_serialize_data_deinit(&igsd, 1 TSRMLS_CC);
-		return FAILURE;
+	if (igbinary_serialize_array(&igsd, Z_REFVAL_P(&PS(http_session_vars)), false, false) != 0) {
+		igbinary_serialize_data_deinit(&igsd, 1);
+		return ZSTR_EMPTY_ALLOC();
 	}
 
-	if (igbinary_serialize8(&igsd, 0 TSRMLS_CC) != 0) {
-		igbinary_serialize_data_deinit(&igsd, 1 TSRMLS_CC);
-		return FAILURE;
+	if (igbinary_serialize8(&igsd, 0) != 0) {
+		igbinary_serialize_data_deinit(&igsd, 1);
+		return ZSTR_EMPTY_ALLOC();
 	}
 
 	/* shrink buffer to the real length, ignore errors */
@@ -535,73 +528,54 @@ PS_SERIALIZER_ENCODE_FUNC(igbinary)
 		igsd.buffer = tmpbuf;
 	}
 
-	*newstr = (char *)igsd.buffer;
-	if (newlen) {
-		*newlen = igsd.buffer_size - 1;
-	}
+	zend_string *s = zend_string_init((char *)igsd.buffer, igsd.buffer_size - 1, 0);
 
-	igbinary_serialize_data_deinit(&igsd, 0 TSRMLS_CC);
+	igbinary_serialize_data_deinit(&igsd, 0);
 
-	return SUCCESS;
+	return s;
 }
 /* }}} */
 /* {{{ Serializer decode function */
 PS_SERIALIZER_DECODE_FUNC(igbinary) {
-	HashPosition tmp_hash_pos;
 	HashTable *tmp_hash;
-	char *key_str;
+	zend_string *key;
 	ulong key_long;
-	int tmp_int;
-	uint key_len;
-	zval *z;
-	zval **d;
+	zval z;
+	zval *d;
 
 	struct igbinary_unserialize_data igsd;
 
 	if (!val || vallen==0)
 		return SUCCESS;
 
-	if (igbinary_unserialize_data_init(&igsd TSRMLS_CC) != 0) {
+	if (igbinary_unserialize_data_init(&igsd) != 0) {
 		return FAILURE;
 	}
 
 	igsd.buffer = (uint8_t *)val;
 	igsd.buffer_size = vallen;
 
-	if (igbinary_unserialize_header(&igsd TSRMLS_CC)) {
-		igbinary_unserialize_data_deinit(&igsd TSRMLS_CC);
+	if (igbinary_unserialize_header(&igsd)) {
+		igbinary_unserialize_data_deinit(&igsd);
 		return FAILURE;
 	}
 
-	ALLOC_INIT_ZVAL(z);
-	if (igbinary_unserialize_zval(&igsd, &z, WANT_CLEAR TSRMLS_CC)) {
-		igbinary_unserialize_data_deinit(&igsd TSRMLS_CC);
-		zval_dtor(z);
-		FREE_ZVAL(z);
+	if (igbinary_unserialize_zval(&igsd, &z, WANT_CLEAR)) {
+		igbinary_unserialize_data_deinit(&igsd);
 		return FAILURE;
 	}
 
-	igbinary_unserialize_data_deinit(&igsd TSRMLS_CC);
-
-	tmp_hash = HASH_OF(z);
+	igbinary_unserialize_data_deinit(&igsd);
 
-	zend_hash_internal_pointer_reset_ex(tmp_hash, &tmp_hash_pos);
-	while (zend_hash_get_current_data_ex(tmp_hash, (void *) &d, &tmp_hash_pos) == SUCCESS) {
-		tmp_int = zend_hash_get_current_key_ex(tmp_hash, &key_str, &key_len, &key_long, 0, &tmp_hash_pos);
+	tmp_hash = HASH_OF(&z);
 
-		switch (tmp_int) {
-			case HASH_KEY_IS_LONG:
-				/* ??? */
-				break;
-			case HASH_KEY_IS_STRING:
-				php_set_session_var(key_str, key_len-1, *d, NULL TSRMLS_CC);
-				php_add_session_var(key_str, key_len-1 TSRMLS_CC);
-				break;
+	ZEND_HASH_FOREACH_KEY_VAL(tmp_hash, key_long, key, d) {
+  		(void)key_long;
+		if (key) {
+			php_set_session_var(key, d, NULL);
+			php_add_session_var(key);
 		}
-		zend_hash_move_forward_ex(tmp_hash, &tmp_hash_pos);
-	}
-	zval_dtor(z);
-	FREE_ZVAL(z);
+	} ZEND_HASH_FOREACH_END();
 
 	return SUCCESS;
 }
@@ -613,7 +587,7 @@ PS_SERIALIZER_DECODE_FUNC(igbinary) {
 static int APC_SERIALIZER_NAME(igbinary) ( APC_SERIALIZER_ARGS ) {
 	(void)config;
 
-	if (igbinary_serialize(buf, buf_len, (zval *)value TSRMLS_CC) == 0) {
+	if (igbinary_serialize(buf, buf_len, (zval *)value) == 0) {
 		/* flipped semantics */
 		return 1;
 	}
@@ -624,12 +598,12 @@ static int APC_SERIALIZER_NAME(igbinary) ( APC_SERIALIZER_ARGS ) {
 static int APC_UNSERIALIZER_NAME(igbinary) ( APC_UNSERIALIZER_ARGS ) {
 	(void)config;
 
-	if (igbinary_unserialize(buf, buf_len, value TSRMLS_CC) == 0) {
+	if (igbinary_unserialize(buf, buf_len, value) == 0) {
 		/* flipped semantics */
 		return 1;
 	}
-	zval_dtor(*value);
-	(*value)->type = IS_NULL;
+	zval_dtor(value);
+	ZVAL_NULL(value);
 	return 0;
 }
 /* }}} */
@@ -637,7 +611,7 @@ static int APC_UNSERIALIZER_NAME(igbinary) ( APC_UNSERIALIZER_ARGS ) {
 
 /* {{{ igbinary_serialize_data_init */
 /** Inits igbinary_serialize_data. */
-inline static int igbinary_serialize_data_init(struct igbinary_serialize_data *igsd, bool scalar, struct igbinary_memory_manager *memory_manager TSRMLS_DC) {
+inline static int igbinary_serialize_data_init(struct igbinary_serialize_data *igsd, bool scalar, struct igbinary_memory_manager *memory_manager) {
 	int r = 0;
 
 	if (memory_manager == NULL) {
@@ -673,7 +647,7 @@ inline static int igbinary_serialize_data_init(struct igbinary_serialize_data *i
 /* }}} */
 /* {{{ igbinary_serialize_data_deinit */
 /** Deinits igbinary_serialize_data. */
-inline static void igbinary_serialize_data_deinit(struct igbinary_serialize_data *igsd, int free_buffer TSRMLS_DC) {
+inline static void igbinary_serialize_data_deinit(struct igbinary_serialize_data *igsd, int free_buffer) {
 	if (free_buffer && igsd->buffer) {
 		igsd->mm.free(igsd->buffer, igsd->mm.context);
 	}
@@ -686,13 +660,13 @@ inline static void igbinary_serialize_data_deinit(struct igbinary_serialize_data
 /* }}} */
 /* {{{ igbinary_serialize_header */
 /** Serializes header. */
-inline static int igbinary_serialize_header(struct igbinary_serialize_data *igsd TSRMLS_DC) {
-	return igbinary_serialize32(igsd, IGBINARY_FORMAT_VERSION TSRMLS_CC); /* version */
+inline static int igbinary_serialize_header(struct igbinary_serialize_data *igsd) {
+	return igbinary_serialize32(igsd, IGBINARY_FORMAT_VERSION); /* version */
 }
 /* }}} */
 /* {{{ igbinary_serialize_resize */
 /** Expands igbinary_serialize_data. */
-inline static int igbinary_serialize_resize(struct igbinary_serialize_data *igsd, size_t size TSRMLS_DC) {
+inline static int igbinary_serialize_resize(struct igbinary_serialize_data *igsd, size_t size) {
 	if (igsd->buffer_size + size < igsd->buffer_capacity) {
 		return 0;
 	}
@@ -710,8 +684,8 @@ inline static int igbinary_serialize_resize(struct igbinary_serialize_data *igsd
 /* }}} */
 /* {{{ igbinary_serialize8 */
 /** Serialize 8bit value. */
-inline static int igbinary_serialize8(struct igbinary_serialize_data *igsd, uint8_t i TSRMLS_DC) {
-	if (igbinary_serialize_resize(igsd, 1 TSRMLS_CC)) {
+inline static int igbinary_serialize8(struct igbinary_serialize_data *igsd, uint8_t i) {
+	if (igbinary_serialize_resize(igsd, 1)) {
 		return 1;
 	}
 
@@ -721,8 +695,8 @@ inline static int igbinary_serialize8(struct igbinary_serialize_data *igsd, uint
 /* }}} */
 /* {{{ igbinary_serialize16 */
 /** Serialize 16bit value. */
-inline static int igbinary_serialize16(struct igbinary_serialize_data *igsd, uint16_t i TSRMLS_DC) {
-	if (igbinary_serialize_resize(igsd, 2 TSRMLS_CC)) {
+inline static int igbinary_serialize16(struct igbinary_serialize_data *igsd, uint16_t i) {
+	if (igbinary_serialize_resize(igsd, 2)) {
 		return 1;
 	}
 
@@ -734,8 +708,8 @@ inline static int igbinary_serialize16(struct igbinary_serialize_data *igsd, uin
 /* }}} */
 /* {{{ igbinary_serialize32 */
 /** Serialize 32bit value. */
-inline static int igbinary_serialize32(struct igbinary_serialize_data *igsd, uint32_t i TSRMLS_DC) {
-	if (igbinary_serialize_resize(igsd, 4 TSRMLS_CC)) {
+inline static int igbinary_serialize32(struct igbinary_serialize_data *igsd, uint32_t i) {
+	if (igbinary_serialize_resize(igsd, 4)) {
 		return 1;
 	}
 
@@ -749,8 +723,8 @@ inline static int igbinary_serialize32(struct igbinary_serialize_data *igsd, uin
 /* }}} */
 /* {{{ igbinary_serialize64 */
 /** Serialize 64bit value. */
-inline static int igbinary_serialize64(struct igbinary_serialize_data *igsd, uint64_t i TSRMLS_DC) {
-	if (igbinary_serialize_resize(igsd, 8 TSRMLS_CC)) {
+inline static int igbinary_serialize64(struct igbinary_serialize_data *igsd, uint64_t i) {
+	if (igbinary_serialize_resize(igsd, 8)) {
 		return 1;
 	}
 
@@ -768,37 +742,37 @@ inline static int igbinary_serialize64(struct igbinary_serialize_data *igsd, uin
 /* }}} */
 /* {{{ igbinary_serialize_null */
 /** Serializes null. */
-inline static int igbinary_serialize_null(struct igbinary_serialize_data *igsd TSRMLS_DC) {
-	return igbinary_serialize8(igsd, igbinary_type_null TSRMLS_CC);
+inline static int igbinary_serialize_null(struct igbinary_serialize_data *igsd) {
+	return igbinary_serialize8(igsd, igbinary_type_null);
 }
 /* }}} */
 /* {{{ igbinary_serialize_bool */
 /** Serializes bool. */
-inline static int igbinary_serialize_bool(struct igbinary_serialize_data *igsd, int b TSRMLS_DC) {
-	return igbinary_serialize8(igsd, (uint8_t) (b ? igbinary_type_bool_true : igbinary_type_bool_false) TSRMLS_CC);
+inline static int igbinary_serialize_bool(struct igbinary_serialize_data *igsd, int b) {
+	return igbinary_serialize8(igsd, (uint8_t) (b ? igbinary_type_bool_true : igbinary_type_bool_false));
 }
 /* }}} */
 /* {{{ igbinary_serialize_long */
 /** Serializes long. */
-inline static int igbinary_serialize_long(struct igbinary_serialize_data *igsd, long l TSRMLS_DC) {
+inline static int igbinary_serialize_long(struct igbinary_serialize_data *igsd, long l) {
 	long k = l >= 0 ? l : -l;
 	bool p = l >= 0 ? true : false;
 
 	/* -LONG_MIN is 0 otherwise. */
 	if (l == LONG_MIN) {
 #if SIZEOF_LONG == 8
-		if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_long64n TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_long64n) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize64(igsd, (uint64_t) 0x8000000000000000 TSRMLS_CC) != 0) {
+		if (igbinary_serialize64(igsd, (uint64_t) 0x8000000000000000) != 0) {
 			return 1;
 		}
 #elif SIZEOF_LONG == 4
-		if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_long32n TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_long32n) != 0) {
 			return 1;
 		}
-		if (igbinary_serialize32(igsd, (uint32_t) 0x80000000 TSRMLS_CC) != 0) {
+		if (igbinary_serialize32(igsd, (uint32_t) 0x80000000) != 0) {
 			return 1;
 		}
 #else
@@ -808,44 +782,44 @@ inline static int igbinary_serialize_long(struct igbinary_serialize_data *igsd,
 	}
 
 	if (k <= 0xff) {
-		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long8p : igbinary_type_long8n) TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long8p : igbinary_type_long8n)) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize8(igsd, (uint8_t) k TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) k) != 0) {
 			return 1;
 		}
 	} else if (k <= 0xffff) {
-		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long16p : igbinary_type_long16n) TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long16p : igbinary_type_long16n)) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize16(igsd, (uint16_t) k TSRMLS_CC) != 0) {
+		if (igbinary_serialize16(igsd, (uint16_t) k) != 0) {
 			return 1;
 		}
 #if SIZEOF_LONG == 8
 	} else if (k <= 0xffffffff) {
-		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long32p : igbinary_type_long32n) TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long32p : igbinary_type_long32n)) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize32(igsd, (uint32_t) k TSRMLS_CC) != 0) {
+		if (igbinary_serialize32(igsd, (uint32_t) k) != 0) {
 			return 1;
 		}
 	} else {
-		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long64p : igbinary_type_long64n) TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long64p : igbinary_type_long64n)) != 0) {
 			return 1;
 		}
-		if (igbinary_serialize64(igsd, (uint64_t) k TSRMLS_CC) != 0) {
+		if (igbinary_serialize64(igsd, (uint64_t) k) != 0) {
 			return 1;
 		}
 	}
 #elif SIZEOF_LONG == 4
 	} else {
-		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long32p : igbinary_type_long32n) TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) (p ? igbinary_type_long32p : igbinary_type_long32n)) != 0) {
 			return 1;
 		}
-		if (igbinary_serialize32(igsd, (uint32_t) k TSRMLS_CC) != 0) {
+		if (igbinary_serialize32(igsd, (uint32_t) k) != 0) {
 			return 1;
 		}
 	}
@@ -858,31 +832,31 @@ inline static int igbinary_serialize_long(struct igbinary_serialize_data *igsd,
 /* }}} */
 /* {{{ igbinary_serialize_double */
 /** Serializes double. */
-inline static int igbinary_serialize_double(struct igbinary_serialize_data *igsd, double d TSRMLS_DC) {
+inline static int igbinary_serialize_double(struct igbinary_serialize_data *igsd, double d) {
 	union {
 		double d;
 		uint64_t u;
 	} u;
 
-	if (igbinary_serialize8(igsd, igbinary_type_double TSRMLS_CC) != 0) {
+	if (igbinary_serialize8(igsd, igbinary_type_double) != 0) {
 		return 1;
 	}
 
 	u.d = d;
 
-	return igbinary_serialize64(igsd, u.u TSRMLS_CC);
+	return igbinary_serialize64(igsd, u.u);
 }
 /* }}} */
 /* {{{ igbinary_serialize_string */
 /** Serializes string.
  * Serializes each string once, after first time uses pointers.
  */
-inline static int igbinary_serialize_string(struct igbinary_serialize_data *igsd, char *s, size_t len TSRMLS_DC) {
+inline static int igbinary_serialize_string(struct igbinary_serialize_data *igsd, char *s, size_t len) {
 	uint32_t t;
 	uint32_t *i = &t;
 
 	if (len == 0) {
-		if (igbinary_serialize8(igsd, igbinary_type_string_empty TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_string_empty) != 0) {
 			return 1;
 		}
 
@@ -896,32 +870,32 @@ inline static int igbinary_serialize_string(struct igbinary_serialize_data *igsd
 
 		igsd->string_count += 1;
 
-		if (igbinary_serialize_chararray(igsd, s, len TSRMLS_CC) != 0) {
+		if (igbinary_serialize_chararray(igsd, s, len) != 0) {
 			return 1;
 		}
 	} else {
 		if (*i <= 0xff) {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_string_id8 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_string_id8) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize8(igsd, (uint8_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) *i) != 0) {
 				return 1;
 			}
 		} else if (*i <= 0xffff) {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_string_id16 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_string_id16) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize16(igsd, (uint16_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize16(igsd, (uint16_t) *i) != 0) {
 				return 1;
 			}
 		} else {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_string_id32 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_string_id32) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize32(igsd, (uint32_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize32(igsd, (uint32_t) *i) != 0) {
 				return 1;
 			}
 		}
@@ -932,34 +906,34 @@ inline static int igbinary_serialize_string(struct igbinary_serialize_data *igsd
 /* }}} */
 /* {{{ igbinary_serialize_chararray */
 /** Serializes string data. */
-inline static int igbinary_serialize_chararray(struct igbinary_serialize_data *igsd, const char *s, size_t len TSRMLS_DC) {
+inline static int igbinary_serialize_chararray(struct igbinary_serialize_data *igsd, const char *s, size_t len) {
 	if (len <= 0xff) {
-		if (igbinary_serialize8(igsd, igbinary_type_string8 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_string8) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize8(igsd, len TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, len) != 0) {
 			return 1;
 		}
 	} else if (len <= 0xffff) {
-		if (igbinary_serialize8(igsd, igbinary_type_string16 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_string16) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize16(igsd, len TSRMLS_CC) != 0) {
+		if (igbinary_serialize16(igsd, len) != 0) {
 			return 1;
 		}
 	} else {
-		if (igbinary_serialize8(igsd, igbinary_type_string32 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_string32) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize32(igsd, len TSRMLS_CC) != 0) {
+		if (igbinary_serialize32(igsd, len) != 0) {
 			return 1;
 		}
 	}
 
-	if (igbinary_serialize_resize(igsd, len TSRMLS_CC)) {
+	if (igbinary_serialize_resize(igsd, len)) {
 		return 1;
 	}
 
@@ -971,15 +945,12 @@ inline static int igbinary_serialize_chararray(struct igbinary_serialize_data *i
 /* }}} */
 /* {{{ igbinay_serialize_array */
 /** Serializes array or objects inner properties. */
-inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd, zval *z, bool object, bool incomplete_class TSRMLS_DC) {
+inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd, zval *z, bool object, bool incomplete_class) {
 	HashTable *h;
-	HashPosition pos;
 	size_t n;
 	zval *d;
 
 	zend_string *key;
-	uint key_len;
-	int key_type;
 	ulong key_index;
 
 	/* hash */
@@ -993,32 +964,32 @@ inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd,
 		--n;
 	}
 
-	if (!object && igbinary_serialize_array_ref(igsd, z, object TSRMLS_CC) == 0) {
+	if (!object && igbinary_serialize_array_ref(igsd, z, object) == 0) {
 		return 0;
 	}
 
 	if (n <= 0xff) {
-		if (igbinary_serialize8(igsd, igbinary_type_array8 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_array8) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize8(igsd, n TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, n) != 0) {
 			return 1;
 		}
 	} else if (n <= 0xffff) {
-		if (igbinary_serialize8(igsd, igbinary_type_array16 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_array16) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize16(igsd, n TSRMLS_CC) != 0) {
+		if (igbinary_serialize16(igsd, n) != 0) {
 			return 1;
 		}
 	} else {
-		if (igbinary_serialize8(igsd, igbinary_type_array32 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_array32) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize32(igsd, n TSRMLS_CC) != 0) {
+		if (igbinary_serialize32(igsd, n) != 0) {
 			return 1;
 		}
 	}
@@ -1036,18 +1007,18 @@ inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd,
 
 		if (key == NULL) {
 			/* Key is numeric */
-			if (igbinary_serialize_long(igsd, key_index TSRMLS_CC) != 0) {
+			if (igbinary_serialize_long(igsd, key_index) != 0) {
 				return 1;
 			}
 		} else {
 			/* Key is string */
-			if (igbinary_serialize_string(igsd, ZSTR_VAL(key), ZSTR_LEN(key) TSRMLS_CC) != 0) {
+			if (igbinary_serialize_string(igsd, ZSTR_VAL(key), ZSTR_LEN(key)) != 0) {
 				return 1;
 			}
 		}
 
 		if (d == NULL) {
-			php_error_docref(NULL TSRMLS_CC, E_NOTICE, "Received NULL value from hash.");
+			php_error_docref(NULL, E_NOTICE, "Received NULL value from hash.");
 			return 1;
 		}
 
@@ -1057,11 +1028,11 @@ inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd,
 		/* we should still add element even if it's not OK,
 		 * since we already wrote the length of the array before */
 		if (Z_TYPE_P(d) == IS_UNDEF) {
-			if (igbinary_serialize_null(igsd TSRMLS_CC)) {
+			if (igbinary_serialize_null(igsd)) {
 				return 1;
 			}
 		} else {
-			if (igbinary_serialize_zval(igsd, d TSRMLS_CC)) {
+			if (igbinary_serialize_zval(igsd, d)) {
 				return 1;
 			}
 		}
@@ -1072,7 +1043,7 @@ inline static int igbinary_serialize_array(struct igbinary_serialize_data *igsd,
 /* }}} */
 /* {{{ igbinary_serialize_array_ref */
 /** Serializes array reference. */
-inline static int igbinary_serialize_array_ref(struct igbinary_serialize_data *igsd, zval *z, bool object TSRMLS_DC) {
+inline static int igbinary_serialize_array_ref(struct igbinary_serialize_data *igsd, zval *z, bool object) {
 	uint32_t t = 0;
 	uint32_t *i = &t;
 	zend_value key = { 0 };
@@ -1105,29 +1076,29 @@ inline static int igbinary_serialize_array_ref(struct igbinary_serialize_data *i
 		enum igbinary_type type;
 		if (*i <= 0xff) {
 			type = object ? igbinary_type_objref8 : igbinary_type_ref8;
-			if (igbinary_serialize8(igsd, (uint8_t) type TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) type) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize8(igsd, (uint8_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) *i) != 0) {
 				return 1;
 			}
 		} else if (*i <= 0xffff) {
 			type = object ? igbinary_type_objref16 : igbinary_type_ref16;
-			if (igbinary_serialize8(igsd, (uint8_t) type TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) type) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize16(igsd, (uint16_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize16(igsd, (uint16_t) *i) != 0) {
 				return 1;
 			}
 		} else {
 			type = object ? igbinary_type_objref32 : igbinary_type_ref32;
-			if (igbinary_serialize8(igsd, (uint8_t) type TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) type) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize32(igsd, (uint32_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize32(igsd, (uint32_t) *i) != 0) {
 				return 1;
 			}
 		}
@@ -1140,16 +1111,13 @@ inline static int igbinary_serialize_array_ref(struct igbinary_serialize_data *i
 /* }}} */
 /* {{{ igbinary_serialize_array_sleep */
 /** Serializes object's properties array with __sleep -function. */
-inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data *igsd, zval *z, HashTable *h, zend_class_entry *ce, bool incomplete_class TSRMLS_DC) {
+inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data *igsd, zval *z, HashTable *h, zend_class_entry *ce, bool incomplete_class) {
 	HashTable *object_properties;
-	HashPosition pos;
 	size_t n = zend_hash_num_elements(h);
 	zval *d;
 	zval *v;
 
 	zend_string *key;
-	uint key_len;
-	int key_type;
 	ulong key_index;
 
 	/* Decrease array size by one, because of magic member (with class name) */
@@ -1159,27 +1127,27 @@ inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data
 
 	/* Serialize array id. */
 	if (n <= 0xff) {
-		if (igbinary_serialize8(igsd, igbinary_type_array8 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_array8) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize8(igsd, n TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, n) != 0) {
 			return 1;
 		}
 	} else if (n <= 0xffff) {
-		if (igbinary_serialize8(igsd, igbinary_type_array16 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_array16) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize16(igsd, n TSRMLS_CC) != 0) {
+		if (igbinary_serialize16(igsd, n) != 0) {
 			return 1;
 		}
 	} else {
-		if (igbinary_serialize8(igsd, igbinary_type_array32 TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, igbinary_type_array32) != 0) {
 			return 1;
 		}
 
-		if (igbinary_serialize32(igsd, n TSRMLS_CC) != 0) {
+		if (igbinary_serialize32(igsd, n) != 0) {
 			return 1;
 		}
 	}
@@ -1191,34 +1159,36 @@ inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data
 	object_properties = Z_OBJPROP_P(z);
 
 	ZEND_HASH_FOREACH_KEY_VAL(h, key_index, key, d) {
+		(void)key_index;
+
 		/* skip magic member in incomplete classes */
 		if (incomplete_class && key != NULL && strcmp(ZSTR_VAL(key), MAGIC_MEMBER) == 0) {
 			continue;
 		}
 
 		if (d == NULL || Z_TYPE_P(d) != IS_STRING) {
-			php_error_docref(NULL TSRMLS_CC, E_NOTICE, "__sleep should return an array only "
+			php_error_docref(NULL, E_NOTICE, "__sleep should return an array only "
 					"containing the names of instance-variables to "
 					"serialize");
 
 			/* we should still add element even if it's not OK,
 			 * since we already wrote the length of the array before
 			 * serialize null as key-value pair */
-			if (igbinary_serialize_null(igsd TSRMLS_CC) != 0) {
+			if (igbinary_serialize_null(igsd) != 0) {
 				return 1;
 			}
 		} else {
 			zend_string *prop_name = Z_STR_P(d);
 
 			if ((v = zend_hash_find(object_properties, prop_name)) != NULL) {
-				if (igbinary_serialize_string(igsd, ZSTR_VAL(prop_name), ZSTR_LEN(prop_name) TSRMLS_CC) != 0) {
+				if (igbinary_serialize_string(igsd, ZSTR_VAL(prop_name), ZSTR_LEN(prop_name)) != 0) {
 					return 1;
 				}
 
 				if (Z_TYPE_P(v) == IS_INDIRECT) {
 					v = Z_INDIRECT_P(v);
 				}
-				if (igbinary_serialize_zval(igsd, v TSRMLS_CC) != 0) {
+				if (igbinary_serialize_zval(igsd, v) != 0) {
 					return 1;
 				}
 			} else if (ce) {
@@ -1245,12 +1215,12 @@ inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data
 					if (v == NULL) {
 						zend_string_release(mangled_prop_name);
 
-						php_error_docref(NULL TSRMLS_CC, E_NOTICE, "\"%s\" returned as member variable from __sleep() but does not exist", Z_STRVAL_P(d));
-						if (igbinary_serialize_string(igsd, Z_STRVAL_P(d), Z_STRLEN_P(d) TSRMLS_CC) != 0) {
+						php_error_docref(NULL, E_NOTICE, "\"%s\" returned as member variable from __sleep() but does not exist", Z_STRVAL_P(d));
+						if (igbinary_serialize_string(igsd, Z_STRVAL_P(d), Z_STRLEN_P(d)) != 0) {
 							return 1;
 						}
 
-						if (igbinary_serialize_null(igsd TSRMLS_CC) != 0) {
+						if (igbinary_serialize_null(igsd) != 0) {
 							return 1;
 						}
 
@@ -1261,20 +1231,20 @@ inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data
 						v = Z_INDIRECT_P(v);
 					}
 
-					if (igbinary_serialize_string(igsd, ZSTR_VAL(mangled_prop_name), ZSTR_LEN(mangled_prop_name) TSRMLS_CC) != 0) {
+					if (igbinary_serialize_string(igsd, ZSTR_VAL(mangled_prop_name), ZSTR_LEN(mangled_prop_name)) != 0) {
 						zend_string_release(mangled_prop_name);
 						return 1;
 					}
 
 					zend_string_release(mangled_prop_name);
-					if (igbinary_serialize_zval(igsd, v TSRMLS_CC) != 0) {
+					if (igbinary_serialize_zval(igsd, v) != 0) {
 						return 1;
 					}
 				} while (0);
 
 			} else {
 				/* if all else fails, just serialize the value in anyway. */
-				if (igbinary_serialize_string(igsd, Z_STRVAL_P(d), Z_STRLEN_P(d) TSRMLS_CC) != 0) {
+				if (igbinary_serialize_string(igsd, Z_STRVAL_P(d), Z_STRLEN_P(d)) != 0) {
 					return 1;
 				}
 
@@ -1282,7 +1252,7 @@ inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data
 					v = Z_INDIRECT_P(v);
 				}
 
-				if (igbinary_serialize_zval(igsd, v TSRMLS_CC) != 0) {
+				if (igbinary_serialize_zval(igsd, v) != 0) {
 					return 1;
 				}
 			}
@@ -1294,7 +1264,7 @@ inline static int igbinary_serialize_array_sleep(struct igbinary_serialize_data
 /* }}} */
 /* {{{ igbinary_serialize_object_name */
 /** Serialize object name. */
-inline static int igbinary_serialize_object_name(struct igbinary_serialize_data *igsd, const char *class_name, size_t name_len TSRMLS_DC) {
+inline static int igbinary_serialize_object_name(struct igbinary_serialize_data *igsd, const char *class_name, size_t name_len) {
 	uint32_t t;
 	uint32_t *i = &t;
 
@@ -1303,32 +1273,32 @@ inline static int igbinary_serialize_object_name(struct igbinary_serialize_data
 		igsd->string_count += 1;
 
 		if (name_len <= 0xff) {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object8 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object8) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize8(igsd, (uint8_t) name_len TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) name_len) != 0) {
 				return 1;
 			}
 		} else if (name_len <= 0xffff) {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object16 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object16) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize16(igsd, (uint16_t) name_len TSRMLS_CC) != 0) {
+			if (igbinary_serialize16(igsd, (uint16_t) name_len) != 0) {
 				return 1;
 			}
 		} else {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object32 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object32) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize32(igsd, (uint32_t) name_len TSRMLS_CC) != 0) {
+			if (igbinary_serialize32(igsd, (uint32_t) name_len) != 0) {
 				return 1;
 			}
 		}
 
-		if (igbinary_serialize_resize(igsd, name_len TSRMLS_CC)) {
+		if (igbinary_serialize_resize(igsd, name_len)) {
 			return 1;
 		}
 
@@ -1337,27 +1307,27 @@ inline static int igbinary_serialize_object_name(struct igbinary_serialize_data
 	} else {
 		/* already serialized string */
 		if (*i <= 0xff) {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_id8 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_id8) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize8(igsd, (uint8_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) *i) != 0) {
 				return 1;
 			}
 		} else if (*i <= 0xffff) {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_id16 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_id16) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize16(igsd, (uint16_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize16(igsd, (uint16_t) *i) != 0) {
 				return 1;
 			}
 		} else {
-			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_id32 TSRMLS_CC) != 0) {
+			if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_id32) != 0) {
 				return 1;
 			}
 
-			if (igbinary_serialize32(igsd, (uint32_t) *i TSRMLS_CC) != 0) {
+			if (igbinary_serialize32(igsd, (uint32_t) *i) != 0) {
 				return 1;
 			}
 		}
@@ -1370,7 +1340,7 @@ inline static int igbinary_serialize_object_name(struct igbinary_serialize_data
 /** Serialize object.
  * @see ext/standard/var.c
  * */
-inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd, zval *z TSRMLS_DC) {
+inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd, zval *z) {
 	PHP_CLASS_ATTRIBUTES;
 
 	zend_class_entry *ce;
@@ -1384,7 +1354,7 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 	size_t serialized_len;
 
 
-	if (igbinary_serialize_array_ref(igsd, z, true TSRMLS_CC) == 0) {
+	if (igbinary_serialize_array_ref(igsd, z, true) == 0) {
 		return r;
 	}
 
@@ -1392,8 +1362,8 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 
 	/* custom serializer */
 	if (ce && ce->serialize != NULL) {
-		if (ce->serialize(z, &serialized_data, &serialized_len, (zend_serialize_data *)NULL TSRMLS_CC) == SUCCESS && !EG(exception)) {
-			if (igbinary_serialize_object_name(igsd, ZSTR_VAL(ce->name), ZSTR_LEN(ce->name) TSRMLS_CC) != 0) {
+		if (ce->serialize(z, &serialized_data, &serialized_len, (zend_serialize_data *)NULL) == SUCCESS && !EG(exception)) {
+			if (igbinary_serialize_object_name(igsd, ZSTR_VAL(ce->name), ZSTR_LEN(ce->name)) != 0) {
 				if (serialized_data) {
 					efree(serialized_data);
 				}
@@ -1402,42 +1372,42 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 
 
 			if (serialized_len <= 0xff) {
-				if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_ser8 TSRMLS_CC) != 0) {
+				if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_ser8) != 0) {
 					if (serialized_data) {
 						efree(serialized_data);
 					}
 					return 1;
 				}
 
-				if (igbinary_serialize8(igsd, (uint8_t) serialized_len TSRMLS_CC) != 0) {
+				if (igbinary_serialize8(igsd, (uint8_t) serialized_len) != 0) {
 					if (serialized_data) {
 						efree(serialized_data);
 					}
 					return 1;
 				}
 			} else if (serialized_len <= 0xffff) {
-				if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_ser16 TSRMLS_CC) != 0) {
+				if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_ser16) != 0) {
 					if (serialized_data) {
 						efree(serialized_data);
 					}
 					return 1;
 				}
 
-				if (igbinary_serialize16(igsd, (uint16_t) serialized_len TSRMLS_CC) != 0) {
+				if (igbinary_serialize16(igsd, (uint16_t) serialized_len) != 0) {
 					if (serialized_data) {
 						efree(serialized_data);
 					}
 					return 1;
 				}
 			} else {
-				if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_ser32 TSRMLS_CC) != 0) {
+				if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_object_ser32) != 0) {
 					if (serialized_data) {
 						efree(serialized_data);
 					}
 					return 1;
 				}
 
-				if (igbinary_serialize32(igsd, (uint32_t) serialized_len TSRMLS_CC) != 0) {
+				if (igbinary_serialize32(igsd, (uint32_t) serialized_len) != 0) {
 					if (serialized_data) {
 						efree(serialized_data);
 					}
@@ -1445,7 +1415,7 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 				}
 			}
 
-			if (igbinary_serialize_resize(igsd, serialized_len TSRMLS_CC)) {
+			if (igbinary_serialize_resize(igsd, serialized_len)) {
 				if (serialized_data) {
 					efree(serialized_data);
 				}
@@ -1460,7 +1430,7 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 			r = 1;
 		} else {
 			/* Serialization callback failed, assume null output */
-			r = igbinary_serialize_null(igsd TSRMLS_CC);
+			r = igbinary_serialize_null(igsd);
 		}
 
 		if (serialized_data) {
@@ -1472,7 +1442,7 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 
 	/* serialize class name */
 	PHP_SET_CLASS_ATTRIBUTES(z);
-	if (igbinary_serialize_object_name(igsd, ZSTR_VAL(class_name), ZSTR_LEN(class_name) TSRMLS_CC) != 0) {
+	if (igbinary_serialize_object_name(igsd, ZSTR_VAL(class_name), ZSTR_LEN(class_name)) != 0) {
 		PHP_CLEANUP_CLASS_ATTRIBUTES();
 		return 1;
 	}
@@ -1484,7 +1454,7 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 
 		ZVAL_UNDEF(&h);
 		/* calling z->__sleep */
-		r = call_user_function_ex(CG(function_table), z, &f, &h, 0, 0, 1, NULL TSRMLS_CC);
+		r = call_user_function_ex(CG(function_table), z, &f, &h, 0, 0, 1, NULL);
 
 		zval_dtor(&f);
 
@@ -1495,16 +1465,16 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 				/* FIXME: is this ok? */
 				/* Valid, but skip */
 			} else if (HASH_OF(&h)) {
-				r = igbinary_serialize_array_sleep(igsd, z, HASH_OF(&h), ce, incomplete_class TSRMLS_CC);
+				r = igbinary_serialize_array_sleep(igsd, z, HASH_OF(&h), ce, incomplete_class);
 			} else {
-				php_error_docref(NULL TSRMLS_CC, E_NOTICE, "__sleep should return an array only "
+				php_error_docref(NULL, E_NOTICE, "__sleep should return an array only "
 						"containing the names of instance-variables to "
 						"serialize");
 
 				/* empty array */
-				r = igbinary_serialize8(igsd, igbinary_type_array8 TSRMLS_CC);
+				r = igbinary_serialize8(igsd, igbinary_type_array8);
 				if (r == 0) {
-					r = igbinary_serialize8(igsd, 0 TSRMLS_CC);
+					r = igbinary_serialize8(igsd, 0);
 				}
 			}
 		} else {
@@ -1516,44 +1486,44 @@ inline static int igbinary_serialize_object(struct igbinary_serialize_data *igsd
 
 		return r;
 	} else {
-		return igbinary_serialize_array(igsd, z, true, incomplete_class TSRMLS_CC);
+		return igbinary_serialize_array(igsd, z, true, incomplete_class);
 	}
 }
 /* }}} */
 /* {{{ igbinary_serialize_zval */
 /** Serialize zval. */
-static int igbinary_serialize_zval(struct igbinary_serialize_data *igsd, zval *z TSRMLS_DC) {
+static int igbinary_serialize_zval(struct igbinary_serialize_data *igsd, zval *z) {
 	if (Z_ISREF_P(z)) {
-		if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_ref TSRMLS_CC) != 0) {
+		if (igbinary_serialize8(igsd, (uint8_t) igbinary_type_ref) != 0) {
 			return 1;
 		}
 
 		/* Complex types serialize a reference, scalars do not... */
 		/* FIXME: Absolutely wrong level to check this. */
-		if (igbinary_serialize_array_ref(igsd, z, false TSRMLS_CC) == 0) {
+		if (igbinary_serialize_array_ref(igsd, z, false) == 0) {
 			return 0;
 		}
 		ZVAL_DEREF(z);
 	}
 	switch (Z_TYPE_P(z)) {
 		case IS_RESOURCE:
-			return igbinary_serialize_null(igsd TSRMLS_CC);
+			return igbinary_serialize_null(igsd);
 		case IS_OBJECT:
-			return igbinary_serialize_object(igsd, z TSRMLS_CC);
+			return igbinary_serialize_object(igsd, z);
 		case IS_ARRAY:
-			return igbinary_serialize_array(igsd, z, false, false TSRMLS_CC);
+			return igbinary_serialize_array(igsd, z, false, false);
 		case IS_STRING:
-			return igbinary_serialize_string(igsd, Z_STRVAL_P(z), Z_STRLEN_P(z) TSRMLS_CC);
+			return igbinary_serialize_string(igsd, Z_STRVAL_P(z), Z_STRLEN_P(z));
 		case IS_LONG:
-			return igbinary_serialize_long(igsd, Z_LVAL_P(z) TSRMLS_CC);
+			return igbinary_serialize_long(igsd, Z_LVAL_P(z));
 		case IS_NULL:
-			return igbinary_serialize_null(igsd TSRMLS_CC);
+			return igbinary_serialize_null(igsd);
 		case IS_TRUE:
-			return igbinary_serialize_bool(igsd, 1 TSRMLS_CC);
+			return igbinary_serialize_bool(igsd, 1);
 		case IS_FALSE:
-			return igbinary_serialize_bool(igsd, 0 TSRMLS_CC);
+			return igbinary_serialize_bool(igsd, 0);
 		case IS_DOUBLE:
-			return igbinary_serialize_double(igsd, Z_DVAL_P(z) TSRMLS_CC);
+			return igbinary_serialize_double(igsd, Z_DVAL_P(z));
 		default:
 			zend_error(E_ERROR, "igbinary_serialize_zval: zval has unknown type %d", (int)Z_TYPE_P(z));
 			/* not reached */
@@ -1565,7 +1535,7 @@ static int igbinary_serialize_zval(struct igbinary_serialize_data *igsd, zval *z
 /* }}} */
 /* {{{ igbinary_unserialize_data_init */
 /** Inits igbinary_unserialize_data_init. */
-inline static int igbinary_unserialize_data_init(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static int igbinary_unserialize_data_init(struct igbinary_unserialize_data *igsd) {
 	smart_string empty_str = { 0 };
 
 	igsd->buffer = NULL;
@@ -1599,7 +1569,7 @@ inline static int igbinary_unserialize_data_init(struct igbinary_unserialize_dat
 /* }}} */
 /* {{{ igbinary_unserialize_data_deinit */
 /** Deinits igbinary_unserialize_data_init. */
-inline static void igbinary_unserialize_data_deinit(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static void igbinary_unserialize_data_deinit(struct igbinary_unserialize_data *igsd) {
 	if (igsd->strings) {
 		efree(igsd->strings);
 	}
@@ -1615,14 +1585,14 @@ inline static void igbinary_unserialize_data_deinit(struct igbinary_unserialize_
 /* }}} */
 /* {{{ igbinary_unserialize_header */
 /** Unserialize header. Check for version. */
-inline static int igbinary_unserialize_header(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static int igbinary_unserialize_header(struct igbinary_unserialize_data *igsd) {
 	uint32_t version;
 
 	if (igsd->buffer_offset + 4 >= igsd->buffer_size) {
 		return 1;
 	}
 
-	version = igbinary_unserialize32(igsd TSRMLS_CC);
+	version = igbinary_unserialize32(igsd);
 
 	/* Support older version 1 and the current format 2 */
 	if (version == IGBINARY_FORMAT_VERSION || version == 0x00000001) {
@@ -1635,7 +1605,7 @@ inline static int igbinary_unserialize_header(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize8 */
 /** Unserialize 8bit value. */
-inline static uint8_t igbinary_unserialize8(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static uint8_t igbinary_unserialize8(struct igbinary_unserialize_data *igsd) {
 	uint8_t ret = 0;
 	ret = igsd->buffer[igsd->buffer_offset++];
 	return ret;
@@ -1643,7 +1613,7 @@ inline static uint8_t igbinary_unserialize8(struct igbinary_unserialize_data *ig
 /* }}} */
 /* {{{ igbinary_unserialize16 */
 /** Unserialize 16bit value. */
-inline static uint16_t igbinary_unserialize16(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static uint16_t igbinary_unserialize16(struct igbinary_unserialize_data *igsd) {
 	uint16_t ret = 0;
 	ret |= ((uint16_t) igsd->buffer[igsd->buffer_offset++] << 8);
 	ret |= ((uint16_t) igsd->buffer[igsd->buffer_offset++] << 0);
@@ -1652,7 +1622,7 @@ inline static uint16_t igbinary_unserialize16(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize32 */
 /** Unserialize 32bit value. */
-inline static uint32_t igbinary_unserialize32(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static uint32_t igbinary_unserialize32(struct igbinary_unserialize_data *igsd) {
 	uint32_t ret = 0;
 	ret |= ((uint32_t) igsd->buffer[igsd->buffer_offset++] << 24);
 	ret |= ((uint32_t) igsd->buffer[igsd->buffer_offset++] << 16);
@@ -1663,7 +1633,7 @@ inline static uint32_t igbinary_unserialize32(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize64 */
 /** Unserialize 64bit value. */
-inline static uint64_t igbinary_unserialize64(struct igbinary_unserialize_data *igsd TSRMLS_DC) {
+inline static uint64_t igbinary_unserialize64(struct igbinary_unserialize_data *igsd) {
 	uint64_t ret = 0;
 	ret |= ((uint64_t) igsd->buffer[igsd->buffer_offset++] << 56);
 	ret |= ((uint64_t) igsd->buffer[igsd->buffer_offset++] << 48);
@@ -1678,7 +1648,7 @@ inline static uint64_t igbinary_unserialize64(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize_long */
 /** Unserializes long */
-inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *igsd, enum igbinary_type t, long *ret TSRMLS_DC) {
+inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *igsd, enum igbinary_type t, long *ret) {
 	uint32_t tmp32;
 #if SIZEOF_LONG == 8
 	uint64_t tmp64;
@@ -1690,14 +1660,14 @@ inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *ig
 			return 1;
 		}
 
-		*ret = (long) (t == igbinary_type_long8n ? -1 : 1) * igbinary_unserialize8(igsd TSRMLS_CC);
+		*ret = (long) (t == igbinary_type_long8n ? -1 : 1) * igbinary_unserialize8(igsd);
 	} else if (t == igbinary_type_long16p || t == igbinary_type_long16n) {
 		if (igsd->buffer_offset + 2 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_long: end-of-data");
 			return 1;
 		}
 
-		*ret = (long) (t == igbinary_type_long16n ? -1 : 1) * igbinary_unserialize16(igsd TSRMLS_CC);
+		*ret = (long) (t == igbinary_type_long16n ? -1 : 1) * igbinary_unserialize16(igsd);
 	} else if (t == igbinary_type_long32p || t == igbinary_type_long32n) {
 		if (igsd->buffer_offset + 4 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_long: end-of-data");
@@ -1705,7 +1675,7 @@ inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *ig
 		}
 
 		/* check for boundaries */
-		tmp32 = igbinary_unserialize32(igsd TSRMLS_CC);
+		tmp32 = igbinary_unserialize32(igsd);
 #if SIZEOF_LONG == 4
 		if (tmp32 > 0x80000000 || (tmp32 == 0x80000000 && t == igbinary_type_long32p)) {
 			zend_error(E_WARNING, "igbinary_unserialize_long: 64bit long on 32bit platform?");
@@ -1721,7 +1691,7 @@ inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *ig
 		}
 
 		/* check for boundaries */
-		tmp64 = igbinary_unserialize64(igsd TSRMLS_CC);
+		tmp64 = igbinary_unserialize64(igsd);
 		if (tmp64 > 0x8000000000000000 || (tmp64 == 0x8000000000000000 && t == igbinary_type_long64p)) {
 			zend_error(E_WARNING, "igbinary_unserialize_long: too big 64bit long.");
 			tmp64 = 0; /* t == igbinary_type_long64p ? LONG_MAX : LONG_MIN */;
@@ -1731,7 +1701,7 @@ inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *ig
 #elif SIZEOF_LONG == 4
 		/* can't put 64bit long into 32bit one, placeholder zero */
 		*ret = 0;
-		igbinary_unserialize64(igsd TSRMLS_CC);
+		igbinary_unserialize64(igsd);
 		zend_error(E_WARNING, "igbinary_unserialize_long: 64bit long on 32bit platform");
 #else
 #error "Strange sizeof(long)."
@@ -1747,7 +1717,7 @@ inline static int igbinary_unserialize_long(struct igbinary_unserialize_data *ig
 /* }}} */
 /* {{{ igbinary_unserialize_double */
 /** Unserializes double. */
-inline static int igbinary_unserialize_double(struct igbinary_unserialize_data *igsd, enum igbinary_type t, double *ret TSRMLS_DC) {
+inline static int igbinary_unserialize_double(struct igbinary_unserialize_data *igsd, enum igbinary_type t, double *ret) {
 	union {
 		double d;
 		uint64_t u;
@@ -1761,7 +1731,7 @@ inline static int igbinary_unserialize_double(struct igbinary_unserialize_data *
 	}
 
 
-	u.u = igbinary_unserialize64(igsd TSRMLS_CC);
+	u.u = igbinary_unserialize64(igsd);
 
 	*ret = u.d;
 
@@ -1770,26 +1740,26 @@ inline static int igbinary_unserialize_double(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize_string */
 /** Unserializes string. Unserializes both actual string or by string id. */
-inline static int igbinary_unserialize_string(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len TSRMLS_DC) {
+inline static int igbinary_unserialize_string(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len) {
 	size_t i;
 	if (t == igbinary_type_string_id8 || t == igbinary_type_object_id8) {
 		if (igsd->buffer_offset + 1 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_string: end-of-data");
 			return 1;
 		}
-		i = igbinary_unserialize8(igsd TSRMLS_CC);
+		i = igbinary_unserialize8(igsd);
 	} else if (t == igbinary_type_string_id16 || t == igbinary_type_object_id16) {
 		if (igsd->buffer_offset + 2 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_string: end-of-data");
 			return 1;
 		}
-		i = igbinary_unserialize16(igsd TSRMLS_CC);
+		i = igbinary_unserialize16(igsd);
 	} else if (t == igbinary_type_string_id32 || t == igbinary_type_object_id32) {
 		if (igsd->buffer_offset + 4 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_string: end-of-data");
 			return 1;
 		}
-		i = igbinary_unserialize32(igsd TSRMLS_CC);
+		i = igbinary_unserialize32(igsd);
 	} else {
 		zend_error(E_WARNING, "igbinary_unserialize_string: unknown type '%02x', position %zu", t, igsd->buffer_offset);
 		return 1;
@@ -1808,7 +1778,7 @@ inline static int igbinary_unserialize_string(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize_chararray */
 /** Unserializes chararray of string. */
-inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len TSRMLS_DC) {
+inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_data *igsd, enum igbinary_type t, char **s, size_t *len) {
 	size_t l;
 
 	if (t == igbinary_type_string8 || t == igbinary_type_object8) {
@@ -1816,7 +1786,7 @@ inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_dat
 			zend_error(E_WARNING, "igbinary_unserialize_chararray: end-of-data");
 			return 1;
 		}
-		l = igbinary_unserialize8(igsd TSRMLS_CC);
+		l = igbinary_unserialize8(igsd);
 		if (igsd->buffer_offset + l > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_chararray: end-of-data");
 			return 1;
@@ -1826,7 +1796,7 @@ inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_dat
 			zend_error(E_WARNING, "igbinary_unserialize_chararray: end-of-data");
 			return 1;
 		}
-		l = igbinary_unserialize16(igsd TSRMLS_CC);
+		l = igbinary_unserialize16(igsd);
 		if (igsd->buffer_offset + l > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_chararray: end-of-data");
 			return 1;
@@ -1836,7 +1806,7 @@ inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_dat
 			zend_error(E_WARNING, "igbinary_unserialize_chararray: end-of-data");
 			return 1;
 		}
-		l = igbinary_unserialize32(igsd TSRMLS_CC);
+		l = igbinary_unserialize32(igsd);
 		if (igsd->buffer_offset + l > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_chararray: end-of-data");
 			return 1;
@@ -1876,7 +1846,7 @@ inline static int igbinary_unserialize_chararray(struct igbinary_unserialize_dat
 /* }}} */
 /* {{{ igbinary_unserialize_array */
 /** Unserializes array. */
-inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags TSRMLS_DC) {
+inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags) {
 	size_t n;
 	size_t i;
 
@@ -1896,19 +1866,19 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 			zend_error(E_WARNING, "igbinary_unserialize_array: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize8(igsd TSRMLS_CC);
+		n = igbinary_unserialize8(igsd);
 	} else if (t == igbinary_type_array16) {
 		if (igsd->buffer_offset + 2 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_array: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize16(igsd TSRMLS_CC);
+		n = igbinary_unserialize16(igsd);
 	} else if (t == igbinary_type_array32) {
 		if (igsd->buffer_offset + 4 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_array: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize32(igsd TSRMLS_CC);
+		n = igbinary_unserialize32(igsd);
 	} else {
 		zend_error(E_WARNING, "igbinary_unserialize_array: unknown type '%02x', position %zu", t, igsd->buffer_offset);
 		return 1;
@@ -1959,7 +1929,7 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 			return 1;
 		}
 
-		key_type = (enum igbinary_type) igbinary_unserialize8(igsd TSRMLS_CC);
+		key_type = (enum igbinary_type) igbinary_unserialize8(igsd);
 
 		switch (key_type) {
 			case igbinary_type_long8p:
@@ -1970,7 +1940,7 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 			case igbinary_type_long32n:
 			case igbinary_type_long64p:
 			case igbinary_type_long64n:
-				if (igbinary_unserialize_long(igsd, key_type, &key_index TSRMLS_CC)) {
+				if (igbinary_unserialize_long(igsd, key_type, &key_index)) {
 					zval_dtor(z);
 					ZVAL_UNDEF(z);
 					return 1;
@@ -1979,7 +1949,7 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 			case igbinary_type_string_id8:
 			case igbinary_type_string_id16:
 			case igbinary_type_string_id32:
-				if (igbinary_unserialize_string(igsd, key_type, &key, &key_len TSRMLS_CC)) {
+				if (igbinary_unserialize_string(igsd, key_type, &key, &key_len)) {
 					zval_dtor(z);
 					ZVAL_UNDEF(z);
 					return 1;
@@ -1988,7 +1958,7 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 			case igbinary_type_string8:
 			case igbinary_type_string16:
 			case igbinary_type_string32:
-				if (igbinary_unserialize_chararray(igsd, key_type, &key, &key_len TSRMLS_CC)) {
+				if (igbinary_unserialize_chararray(igsd, key_type, &key, &key_len)) {
 					zval_dtor(z);
 					ZVAL_UNDEF(z);
 					return 1;
@@ -2041,7 +2011,7 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 		}
 
 		ZEND_ASSERT(vp != NULL);
-		if (igbinary_unserialize_zval(igsd, vp, WANT_CLEAR TSRMLS_CC)) {
+		if (igbinary_unserialize_zval(igsd, vp, WANT_CLEAR)) {
 			/* zval_ptr_dtor(z); */
 			/* zval_ptr_dtor(vp); */
 			return 1;
@@ -2053,7 +2023,7 @@ inline static int igbinary_unserialize_array(struct igbinary_unserialize_data *i
 /* }}} */
 /* {{{ igbinary_unserialize_object_ser */
 /** Unserializes object's property array of objects implementing Serializable -interface. */
-inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, zend_class_entry *ce TSRMLS_DC) {
+inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, zend_class_entry *ce) {
 	size_t n;
 	int ret;
 	php_unserialize_data_t var_hash;
@@ -2068,19 +2038,19 @@ inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_da
 			zend_error(E_WARNING, "igbinary_unserialize_object_ser: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize8(igsd TSRMLS_CC);
+		n = igbinary_unserialize8(igsd);
 	} else if (t == igbinary_type_object_ser16) {
 		if (igsd->buffer_offset + 2 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_object_ser: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize16(igsd TSRMLS_CC);
+		n = igbinary_unserialize16(igsd);
 	} else if (t == igbinary_type_object_ser32) {
 		if (igsd->buffer_offset + 4 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_object_ser: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize32(igsd TSRMLS_CC);
+		n = igbinary_unserialize32(igsd);
 	} else {
 		zend_error(E_WARNING, "igbinary_unserialize_object_ser: unknown type '%02x', position %zu", t, igsd->buffer_offset);
 		return 1;
@@ -2094,7 +2064,7 @@ inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_da
 	PHP_VAR_UNSERIALIZE_INIT(var_hash);
 	ret = ce->unserialize(z, ce,
 		(const unsigned char*)(igsd->buffer + igsd->buffer_offset), n,
-		(zend_unserialize_data *)&var_hash TSRMLS_CC);
+		(zend_unserialize_data *)&var_hash);
 	PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
 
 	if (ret != SUCCESS || EG(exception)) {
@@ -2110,9 +2080,8 @@ inline static int igbinary_unserialize_object_ser(struct igbinary_unserialize_da
 /** Unserialize object.
  * @see ext/standard/var_unserializer.c
  */
-inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags TSRMLS_DC) {
+inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z, int flags) {
 	zend_class_entry *ce;
-	zend_class_entry **pce;
 
 	zval h;
 	zval f;
@@ -2131,11 +2100,11 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 	zval args[1];
 
 	if (t == igbinary_type_object8 || t == igbinary_type_object16 || t == igbinary_type_object32) {
-		if (igbinary_unserialize_chararray(igsd, t, &name, &name_len TSRMLS_CC)) {
+		if (igbinary_unserialize_chararray(igsd, t, &name, &name_len)) {
 			return 1;
 		}
 	} else if (t == igbinary_type_object_id8 || t == igbinary_type_object_id16 || t == igbinary_type_object_id32) {
-		if (igbinary_unserialize_string(igsd, t, &name, &name_len TSRMLS_CC)) {
+		if (igbinary_unserialize_string(igsd, t, &name, &name_len)) {
 			return 1;
 		}
 	} else {
@@ -2147,7 +2116,7 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 
 	do {
 		/* Try to find class directly */
-		if (ce = zend_lookup_class(class_name TSRMLS_CC)) {
+		if ((ce = zend_lookup_class(class_name))) {
 			/* FIXME: lookup class may cause exception in load callback */
 			break;
 		}
@@ -2165,8 +2134,8 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 		/* FIXME: Release arg[0] */
 		/* FIXME: Release class_name */
 		ZVAL_STR_COPY(&args[0], class_name);
-		if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL TSRMLS_CC) != SUCCESS) {
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "defined (%s) but not found", name);
+		if (call_user_function_ex(CG(function_table), NULL, &user_func, &retval, 1, args, 0, NULL) != SUCCESS) {
+			php_error_docref(NULL, E_WARNING, "defined (%s) but not found", name);
 			incomplete_class = 1;
 			ce = PHP_IC_ENTRY;
 			zval_ptr_dtor(&args[0]);
@@ -2177,9 +2146,9 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 		zval_ptr_dtor(&retval);
 
 		/* The callback function may have defined the class */
-		ce = zend_lookup_class(class_name TSRMLS_CC);
+		ce = zend_lookup_class(class_name);
 		if (!ce) {
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Function %s() hasn't defined the class it was called for", name);
+			php_error_docref(NULL, E_WARNING, "Function %s() hasn't defined the class it was called for", name);
 			incomplete_class = true;
 			ce = PHP_IC_ENTRY;
 		}
@@ -2212,7 +2181,7 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 	/*ZVAL_UNDEF(IGB_REF_VAL(igsd, ref_n));*/
 	IGB_REF_VAL(igsd, ref_n) = z;
 
-	t = (enum igbinary_type) igbinary_unserialize8(igsd TSRMLS_CC);
+	t = (enum igbinary_type) igbinary_unserialize8(igsd);
 	switch (t) {
 		case igbinary_type_array8:
 		case igbinary_type_array16:
@@ -2221,12 +2190,12 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 			if (incomplete_class) {
 				php_store_class_name(IGB_REF_VAL(igsd, ref_n), name, name_len);
 			}
-			r = igbinary_unserialize_array(igsd, t, IGB_REF_VAL(igsd, ref_n), WANT_OBJECT TSRMLS_CC);
+			r = igbinary_unserialize_array(igsd, t, IGB_REF_VAL(igsd, ref_n), WANT_OBJECT);
 			break;
 		case igbinary_type_object_ser8:
 		case igbinary_type_object_ser16:
 		case igbinary_type_object_ser32:
-			r = igbinary_unserialize_object_ser(igsd, t, IGB_REF_VAL(igsd, ref_n), ce TSRMLS_CC);
+			r = igbinary_unserialize_object_ser(igsd, t, IGB_REF_VAL(igsd, ref_n), ce);
 			if (r == 0 && incomplete_class) {
 				php_store_class_name(IGB_REF_VAL(igsd, ref_n), name, name_len);
 			}
@@ -2241,7 +2210,7 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 		zend_hash_str_exists(&Z_OBJCE_P(IGB_REF_VAL(igsd, ref_n))->function_table, "__wakeup", sizeof("__wakeup") - 1)) {
 		ZVAL_UNDEF(&h);
 		ZVAL_STRINGL(&f, "__wakeup", sizeof("__wakeup") - 1);
-		call_user_function_ex(CG(function_table), IGB_REF_VAL(igsd, ref_n), &f, &h, 0, 0, 1, NULL TSRMLS_CC);
+		call_user_function_ex(CG(function_table), IGB_REF_VAL(igsd, ref_n), &f, &h, 0, 0, 1, NULL);
 
 		zval_dtor(&f);
 		zval_ptr_dtor(&h);
@@ -2258,7 +2227,7 @@ inline static int igbinary_unserialize_object(struct igbinary_unserialize_data *
 /* }}} */
 /* {{{ igbinary_unserialize_ref */
 /** Unserializes array or object by reference. */
-inline static int igbinary_unserialize_ref(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z TSRMLS_DC) {
+inline static int igbinary_unserialize_ref(struct igbinary_unserialize_data *igsd, enum igbinary_type t, zval *z) {
 	size_t n;
 
 	if (t == igbinary_type_ref8 || t == igbinary_type_objref8) {
@@ -2266,19 +2235,19 @@ inline static int igbinary_unserialize_ref(struct igbinary_unserialize_data *igs
 			zend_error(E_WARNING, "igbinary_unserialize_ref: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize8(igsd TSRMLS_CC);
+		n = igbinary_unserialize8(igsd);
 	} else if (t == igbinary_type_ref16 || t == igbinary_type_objref16) {
 		if (igsd->buffer_offset + 2 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_ref: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize16(igsd TSRMLS_CC);
+		n = igbinary_unserialize16(igsd);
 	} else if (t == igbinary_type_ref32 || t == igbinary_type_objref32) {
 		if (igsd->buffer_offset + 4 > igsd->buffer_size) {
 			zend_error(E_WARNING, "igbinary_unserialize_ref: end-of-data");
 			return 1;
 		}
-		n = igbinary_unserialize32(igsd TSRMLS_CC);
+		n = igbinary_unserialize32(igsd);
 	} else {
 		zend_error(E_WARNING, "igbinary_unserialize_ref: unknown type '%02x', position %zu", t, igsd->buffer_offset);
 		return 1;
@@ -2307,13 +2276,12 @@ inline static int igbinary_unserialize_ref(struct igbinary_unserialize_data *igs
 /* }}} */
 /* {{{ igbinary_unserialize_zval */
 /** Unserialize zval. */
-static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zval *z, int flags TSRMLS_DC) {
+static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zval *z, int flags) {
 	enum igbinary_type t;
 
 	long tmp_long;
 	double tmp_double;
 	char *tmp_chararray;
-	zval *zp;
 	size_t tmp_size_t;
 	size_t ref_n;
 
@@ -2322,11 +2290,11 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 		return 1;
 	}
 
-	t = (enum igbinary_type) igbinary_unserialize8(igsd TSRMLS_CC);
+	t = (enum igbinary_type) igbinary_unserialize8(igsd);
 
 	switch (t) {
 		case igbinary_type_ref:
-			if (igbinary_unserialize_zval(igsd, z, WANT_REF TSRMLS_CC)) {
+			if (igbinary_unserialize_zval(igsd, z, WANT_REF)) {
 				return 1;
 			}
 
@@ -2358,7 +2326,7 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 		case igbinary_type_ref8:
 		case igbinary_type_ref16:
 		case igbinary_type_ref32:
-			if (igbinary_unserialize_ref(igsd, t, z TSRMLS_CC)) {
+			if (igbinary_unserialize_ref(igsd, t, z)) {
 				return 1;
 			}
 			break;
@@ -2368,14 +2336,14 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 		case igbinary_type_object_id8:
 		case igbinary_type_object_id16:
 		case igbinary_type_object_id32:
-			if (igbinary_unserialize_object(igsd, t, z, flags TSRMLS_CC)) {
+			if (igbinary_unserialize_object(igsd, t, z, flags)) {
 				return 1;
 			}
 			break;
 		case igbinary_type_array8:
 		case igbinary_type_array16:
 		case igbinary_type_array32:
-			if (igbinary_unserialize_array(igsd, t, z, flags TSRMLS_CC)) {
+			if (igbinary_unserialize_array(igsd, t, z, flags)) {
 				return 1;
 			}
 			break;
@@ -2385,7 +2353,7 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 		case igbinary_type_string_id8:
 		case igbinary_type_string_id16:
 		case igbinary_type_string_id32:
-			if (igbinary_unserialize_string(igsd, t, &tmp_chararray, &tmp_size_t TSRMLS_CC)) {
+			if (igbinary_unserialize_string(igsd, t, &tmp_chararray, &tmp_size_t)) {
 				return 1;
 			}
 			ZVAL_STRINGL(z, tmp_chararray, tmp_size_t);
@@ -2393,7 +2361,7 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 		case igbinary_type_string8:
 		case igbinary_type_string16:
 		case igbinary_type_string32:
-			if (igbinary_unserialize_chararray(igsd, t, &tmp_chararray, &tmp_size_t TSRMLS_CC)) {
+			if (igbinary_unserialize_chararray(igsd, t, &tmp_chararray, &tmp_size_t)) {
 				return 1;
 			}
 			ZVAL_STRINGL(z, tmp_chararray, tmp_size_t);
@@ -2406,7 +2374,7 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 		case igbinary_type_long32n:
 		case igbinary_type_long64p:
 		case igbinary_type_long64n:
-			if (igbinary_unserialize_long(igsd, t, &tmp_long TSRMLS_CC)) {
+			if (igbinary_unserialize_long(igsd, t, &tmp_long)) {
 				return 1;
 			}
 			ZVAL_LONG(z, tmp_long);
@@ -2421,7 +2389,7 @@ static int igbinary_unserialize_zval(struct igbinary_unserialize_data *igsd, zva
 			ZVAL_BOOL(z, 1);
 			break;
 		case igbinary_type_double:
-			if (igbinary_unserialize_double(igsd, t, &tmp_double TSRMLS_CC)) {
+			if (igbinary_unserialize_double(igsd, t, &tmp_double)) {
 				return 1;
 			}
 			ZVAL_DOUBLE(z, tmp_double);
diff --git a/igbinary.h b/igbinary.h
index 39560b7..357edd0 100644
--- a/igbinary.h
+++ b/igbinary.h
@@ -49,7 +49,7 @@ struct igbinary_memory_manager {
  * @param[in] z Variable to be serialized
  * @return 0 on success, 1 elsewhere.
  */
-IGBINARY_API int igbinary_serialize(uint8_t **ret, size_t *ret_len, zval *z TSRMLS_DC);
+IGBINARY_API int igbinary_serialize(uint8_t **ret, size_t *ret_len, zval *z);
 
 /** Serialize zval.
  * Return buffer is allocated by this function with emalloc.
@@ -59,7 +59,7 @@ IGBINARY_API int igbinary_serialize(uint8_t **ret, size_t *ret_len, zval *z TSRM
  * @param[in] memory_manager Pointer to the structure that contains memory allocation functions.
  * @return 0 on success, 1 elsewhere.
  */
-IGBINARY_API int igbinary_serialize_ex(uint8_t **ret, size_t *ret_len, zval *z, struct igbinary_memory_manager *memory_manager TSRMLS_DC);
+IGBINARY_API int igbinary_serialize_ex(uint8_t **ret, size_t *ret_len, zval *z, struct igbinary_memory_manager *memory_manager);
 
 /** Unserialize to zval.
  * @param[in] buf Buffer with serialized data.
@@ -67,6 +67,6 @@ IGBINARY_API int igbinary_serialize_ex(uint8_t **ret, size_t *ret_len, zval *z,
  * @param[out] z Unserialized zval
  * @return 0 on success, 1 elsewhere.
  */
-IGBINARY_API int igbinary_unserialize(const uint8_t *buf, size_t buf_len, zval *z TSRMLS_DC);
+IGBINARY_API int igbinary_unserialize(const uint8_t *buf, size_t buf_len, zval *z);
 
 #endif /* IGBINARY_H */
