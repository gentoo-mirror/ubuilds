#
# Limit of memory used to store tuples to 100MB
# (0.1 GB)
# This effectively limits the memory, used by
# Tarantool. However, index and connection memory
# is stored outside the slab allocator, hence
# the effective memory usage can be higher (sometimes
# twice as high).
#
slab_alloc_arena = 0.1

#
# For multiple server instances see README.MultiInstance.md
# file in /usr/share/doc 
#

#
# Read only and read-write port.
primary_port = 33013

# Read-only port.
secondary_port = 33014

#
# Pipe the logs into the following process.
#
logger="/usr/lib/tarantool/tarantool_logger /var/log/tarantool/tarantool.log"

# Log level, 0 = fatal, 1 = error, 2 = crit, 3 = warn, 4 = info, 5 = debug
log_level=4

#
# Store the pid in this file.
#
pid_file = "/run/tarantool/tarantool.pid"

# ************* Package option **********************
# count of file descriptors
#
opt file_descriptors = 8192
# ***************************************************

# ************* Package option **********************
#  Count of snapshots to save (default = 10). COUNT=0
# disables removing
#
opt save_snapshots = 10
# ***************************************************
  

# ************* Package option **********************
# Snapshot creating period (hours), (default = 24)
#
opt snapshot_period = 12
# ***************************************************

#
# The port for administrative commands.
#
admin_port = 33015

#
# directory that contains lua procedures
# (the first script must have name 'init.lua')
#
script_dir = /usr/share/tarantool/lua/

#
# Each write ahead log contains this many rows.
# When the limit is reached, Tarantool closes
# the WAL and starts a new one.
rows_per_wal = 50000

# Define a simple space with 1 HASH-based
# primary key.
space[0].enabled = 1
space[0].index[0].type = "HASH"
space[0].index[0].unique = 1
space[0].index[0].key_field[0].fieldno = 0
space[0].index[0].key_field[0].type = "NUM"

